label = "Type of clustering",
value = T,
onLabel = "Hierarchical",
offLabel = "K-means",
onStatus = 'success',
offStatus = 'primary',
labelWidth = 100,
size = 'small',
inline = T
),
numericInput("NCLUST_ATAC", label = "Number of k-means clusters", value = 5),
switchInput(
"colorScale_doRev_ATAC",
label = "Reverse color scale?",
value = F,
onLabel = "Yes",
offLabel = "No",
onStatus = 'success',
offStatus = 'primary',
labelWidth = 150,
width = "400px",
size = 'small',
inline = T
),
switchInput(
"ATAC_TPMZscore",
label = "Which values to plot (ATAC-seq)?",
value = T,
onLabel = "TPM",
offLabel = "Z-score",
onStatus = 'primary',
offStatus = 'warning',
labelWidth = 200,
width = "400px",
size = 'small',
inline = T
)
) } )
),
fluidRow(
column(width = 4, { plotOutput("HMs.plot_LCAPdev")  }),
column(width = 4, { plotOutput("HMs.plot_LCAP")  }),
column(width = 4, { plotOutput("HMs.plot_ATAC")  })
),
br(),
fluidRow(
column(width = 4, { downloadBttn("downloadHM_LCAPdev", label = "Download heatmap", size = "sm", style = "fill", color = "primary", block = F) }),
column(width = 4, { downloadBttn("downloadHM_LCAP", label = "Download heatmap", size = "sm", style = "fill", color = "primary", block = F) }),
column(width = 4, { downloadBttn("downloadHM_ATAC", label = "Download heatmap", size = "sm", style = "fill", color = "primary", block = F) })
),
br(),
hr(),
br(),
## Row 3: OUTPUT GO.plot
fluidRow(
column(width = 2, {
fluidRow(
actionBttn("runGO", label = "Perform GO analysis", icon = icon("search", lib = "font-awesome"), style = 'bordered', color = "primary"),
br(),
br(),
dropdownButton(
tags$h4("Select GO databses"),
checkboxGroupInput("checkGroupGOs", label = "",
choices = list("MF (Molecular Function)" = "MF", "BP (Biological Process)" = "BP", "CC (Cellular Component)" = "CC", "kegg (KEGG pathway)" = "keg"),
selected = c("MF", "BP", "CC", "keg")
),
br(),
tags$h4("Apply filtering?"),
selectInput(
inputId = 'hierarchyFiltering',
label = '',
choices = c("none", "moderate", "strong"),
selected = "moderate"
),
circle = TRUE, status = "warning", icon = icon("gear"),
tooltip = tooltipOptions(title = "Set filtering")
)
)
} ),
column(width = 7, { plotOutput("GO.plot") %>% withSpinner(type = 6, color = "#421500", size = 0.5) } ),
column(width = 2, { fluidRow(
br(),
downloadBttn("downloadGO", label = "Download full GO report (.txt file)", size = "sm", style = "fill", color = "primary", block = T)
) } )
),
br(),
hr(),
br(),
## Row 4: DISPLAY GENES LIST
column( width = 2, { htmlOutput("genesList") } ),
br()
)
)
# Genome browser
TAB3 <- tabItem(
tabName = 'browser',
fluidPage(
fluidRow(
column(width = 6, downloadBttn("downloadBWLCAP", label = "Download all the tissue-specific RNA-seq tracks (bigwig format)", size = "sm", style = "fill", color = "primary", block = F) ),
column(width = 6, downloadBttn("downloadBWATAC", label = "Download all the tissue-specific ATAC-seq tracks (bigwig format)", size = "sm", style = "fill", color = "primary", block = F) )
),
br(),
fluidRow( {
#JbrowseOutput("jbrowser", height = "100%") ### THIS ONE IS GOOD!!! (IT DOESN'T MATTER)
htmlOutput("jbrowser")
} )
)
)
# Download data
TAB4 <- tabItem(
tabName = 'download',
fluidPage(
# Download buttons
h2("Download our tissue-specific datasets"),
fluidRow(
column(width = 5, { fluidRow(
downloadBttn("downloadATAC.txt", label = "Download the entire tissue-specific ATAC-seq dataset (txt format, Excel friendly)", size = "sm", style = "fill", color = "primary", block = T),
br(),
br(),
downloadBttn("downloadATAC.gff", label = "Download the entire tissue-specific ATAC-seq dataset (GFF format, IGV friendly)", size = "sm", style = "fill", color = "primary", block = T)
) } ),
column(width = 1, p(" ")),
column(width = 5, { fluidRow(
downloadBttn("downloadLCAP.txt", label = "Download the entire tissue-specific RNA-seq dataset (txt format, Excel friendly)", size = "sm", style = "fill", color = "primary", block = T),
br(),
br(),
downloadBttn("downloadLCAP.gff", label = "Download the entire tissue-specific RNA-seq dataset (GFF format, IGV friendly)", size = "sm", style = "fill", color = "primary", block = T)
) } )
),
hr(),
# Browse ATAC table
h4("Navigate ATAC-seq data"),
fluidRow( column(width = 12, { dataTableOutput("atac.table") } ) ),
hr(),
# Browse LCAP table
h4("Navigate RNA-seq data"),
fluidRow( column(width = 12, { dataTableOutput("lcap.table") } ) )
)
)
# Contact us
TAB5 <- tabItem(
tabName = 'contact',
fluidPage(
fluidRow(
column(width = 6, {
HTML(
'
<div class="card">
<img src="http://ahringerlab.com/assets/img/ahringer-group-2017.jpg" alt="Lab" style="height: 284.16px">
<h1>Ahringer Lab</h1>
<br/>
<p class="cardtitle"> </p>
<p>Gurdon Institute, UK</p>
<p>Cambridge University, UK</p>
</br>
<br/>
<p><buttoncard><a style="text-decoration: none;font-size: 22px; color: white;" href="http://www.ahringer.group.gurdon.cam.ac.uk/" target="_blank">Visit us</a></button></p>
</div>
'
)
}),
column(width = 6, {
HTML(
'
<div class="card">
<img src="http://ahringerlab.com/assets/img/JS.jpg" alt="JS" style="height: 284.16px">
<h1>Jacques Serizay</h1>
<a itemprop="sameAs" href="https://github.com/js2264" target="_blank">
<span class="fa-stack fa-lg">
<i class="fa fa-circle fa-stack-2x" style="color:black"></i>
<i class="fa fa-github fa-stack-1x fa-inverse"></i>
</span>
</a>
<a itemprop="sameAs" href="https://www.linkedin.com/in/jacques-serizay-55103460/" target="_blank">
<span class="fa-stack fa-lg">
<i class="fa fa-circle fa-stack-2x" style="color:black"></i>
<i class="fa fa-linkedin fa-stack-1x fa-inverse"></i>
</span>
</a>
<a itemprop="sameAs" href="https://scholar.google.co.uk/citations?user=e5QTBIAAAAAJ" target="_blank">
<span class="fa-stack fa-lg">
<i class="fa fa-circle fa-stack-2x" style="color:black"></i>
<i class="fa fa-google fa-stack-1x fa-inverse"></i>
</span>
</a>
<br/>
<br/>
<p class="cardtitle">PhD candidate</p>
<p class="cardtitle">Developer/Maintenance of JABrowse</p>
<br/>
<p>Gurdon Institute, UK</p>
<p>Cambridge University, UK</p>
<br/>
<br/>
<p><buttoncard><a style="text-decoration: none;font-size: 22px; color: white;" href="mailto:js2264@cam.ac.uk" target="_blank">Contact</a></button></p>
</div>
'
)
})
)
)
)
## Finalise UI ----------------------------------------------------------------------------------------------------
SIDEBAR <- sidebarMenu(
id = "tabs",
menuItem("Look-up gene", tabName = "genelookup", icon = icon("ellipsis-h", lib = "font-awesome")),
menuItem("Look-up multiple genes", tabName = "geneslookup", icon = icon("ellipsis-h", lib = "font-awesome")),
menuItem("Genome browser", tabName = "browser", icon = icon("area-chart", lib = "font-awesome")),
menuItem("Explore/Download datasets", tabName = "download", icon = icon("download", lib = "font-awesome")),
menuItem("Contact us", tabName = "contact", icon = icon("envelope-open", lib = "font-awesome")),
sidebarSearchForm(textId = "quickGene", buttonId = "quickSearch", label = "Quick gene search..."),
tags$footer(
img(src = "http://ahringerlab.com/assets/img/sidebar-img_150x150.png", alt = "", style = "
color: #b8c7ce;
padding: 0px 40px 30px 40px;
z-index: 1000;
"),
br(),
HTML(paste("Ahringer lab -", icon("copyright", lib = "font-awesome"), "2019")),
align = "left",
style = "
position: fixed;
bottom: 0;
text-align: center;
color: #b8c7ce;
padding: 0px 0px 10px 0px;
left: 0px;
z-index: 1000;
"
)
)
BODY <- tabItems(TAB1, TAB2, TAB3, TAB4, TAB5)
shinyUI <- dashboardPage(
dashboardHeader(
title = paste0("Ahringer lab C. elegans tissue-specific database ", version), titleWidth = 600,
tags$li(
a(
href = 'http://ahringerlab.com',
img(src = 'http://ahringerlab.com/assets/img/favicon.ico', title = "Go back to main page", height = "30px"),
style = "padding-top:10px; padding-bottom:10px;"
),
class = "dropdown"
)
),
dashboardSidebar(SIDEBAR),
dashboardBody(
tags$script(inactivity),
tags$head(includeCSS("assets/custom.css")),
tags$head(tags$link(rel = "shortcut icon", href = "http://ahringerlab.com/assets/img/favicon.ico")),
tags$head(tags$style(HTML('.left-side, .main-sidebar {position: fixed;} .navbar {position: fixed; right: 0px; left: 0px;} .main-header .logo {position: fixed} .content {padding: 65px 15px 15px 15px;}'))),
tags$head(tags$style(HTML('.logo .sidebar-toogle .navbar-navbar-static-top {position: fixed;}'))),
tags$head(tags$style(HTML('.skin-blue .main-header .logo {background-color: #333;} .skin-blue .main-header .logo:hover {background-color: #333;}'))),
tags$head(tags$style(HTML('.skin-blue .main-header .navbar {background-color: #333;} .skin-blue .main-header .navbar {background-color: #333;}'))),
tags$head(tags$style(HTML('.skin-blue .main-header .navbar .sidebar-toggle {background-color: #333;} .skin-blue .main-header .navbar .sidebar-toggle:hover {background-color: #444;}'))),
tags$head(tags$style(HTML('.skin-blue .left-side, .skin-blue .main-sidebar, .skin-blue .wrapper {background-color: #333;}'))),
tags$head(tags$style(HTML('.main-header .sidebar-toggle {size:100px}'))),
tags$head(tags$style(HTML('.main-header .sidebar-toggle:before {size:100px; content: "\\f0d9"}'))),
tags$head(tags$style(HTML('.main-header .sidebar-toggle:after {size:100px; content: "\\f0da"}'))),
tags$head(tags$style(HTML("hr {border-top: 1px dashed #b7b7b7;}"))),
tags$head(tags$style(HTML(".btn {border-radius: 30px;} .btn:hover {transform: scale(1.05);}"))),
tags$head(tags$style(HTML(".bttn-fill.bttn-primary {background: #ddd;color: #333;}.bttn-fill.bttn-sm {padding: 4px 10px;font-size: 16px;font-family: inherit;}.bttn {border-radius: 0px;border-color: #555;}"))),
tags$head(tags$style(HTML(".bttn-bordered.bttn-primary {background: #fff;color: #600;border-radius: 5px; border-color: #600} .bttn-bordered.bttn-primary:hover, .bttn-bordered.bttn-primary:focus {background: #600;color: #fff;}"))),
tags$head(tags$style(HTML(".bttn-minimal.bttn-default {background: #fff;color: #333;border-color: #fff;}"))),
tags$head(tags$style(HTML("a {color: #333} a:hover, a:focus, a:active, a:visited {color: #1d89ff;}"))),
tags$head(tags$style(HTML(".multicol2 {-webkit-column-count: 1; /* Chrome, Safari, Opera */ -moz-column-count: 1; /* Firefox */ column-count: 1;}"))),
tags$head(tags$style(HTML(".multicol5 {-webkit-column-count: 5; /* Chrome, Safari, Opera */ -moz-column-count: 5; /* Firefox */ column-count: 5;}"))),
tags$head(tags$style(HTML(".content-wrapper, .right-side { background-color: #FFF;}"))),
tags$head(tags$style(HTML(".card { width: 80%;}"))),
tags$head(tags$style(HTML(".img-round { width: 80%;}"))),
BODY,
bsModal(
id = "quickGENE",
title = "Quick gene view",
trigger = '',
size = "large",
htmlOutput("quickResults")
)
)
)
shinyApp(ui = shinyUI, server = shinyServer)
shinyApp(ui = shinyUI, server = shinyServer)
BODY <- tabItems(TAB1)
shinyUI <- dashboardPage(
dashboardHeader(
title = paste0("Ahringer lab C. elegans tissue-specific database ", version), titleWidth = 600,
tags$li(
a(
href = 'http://ahringerlab.com',
img(src = 'http://ahringerlab.com/assets/img/favicon.ico', title = "Go back to main page", height = "30px"),
style = "padding-top:10px; padding-bottom:10px;"
),
class = "dropdown"
)
),
dashboardSidebar(SIDEBAR),
dashboardBody(
tags$script(inactivity),
tags$head(includeCSS("assets/custom.css")),
tags$head(tags$link(rel = "shortcut icon", href = "http://ahringerlab.com/assets/img/favicon.ico")),
tags$head(tags$style(HTML('.left-side, .main-sidebar {position: fixed;} .navbar {position: fixed; right: 0px; left: 0px;} .main-header .logo {position: fixed} .content {padding: 65px 15px 15px 15px;}'))),
tags$head(tags$style(HTML('.logo .sidebar-toogle .navbar-navbar-static-top {position: fixed;}'))),
tags$head(tags$style(HTML('.skin-blue .main-header .logo {background-color: #333;} .skin-blue .main-header .logo:hover {background-color: #333;}'))),
tags$head(tags$style(HTML('.skin-blue .main-header .navbar {background-color: #333;} .skin-blue .main-header .navbar {background-color: #333;}'))),
tags$head(tags$style(HTML('.skin-blue .main-header .navbar .sidebar-toggle {background-color: #333;} .skin-blue .main-header .navbar .sidebar-toggle:hover {background-color: #444;}'))),
tags$head(tags$style(HTML('.skin-blue .left-side, .skin-blue .main-sidebar, .skin-blue .wrapper {background-color: #333;}'))),
tags$head(tags$style(HTML('.main-header .sidebar-toggle {size:100px}'))),
tags$head(tags$style(HTML('.main-header .sidebar-toggle:before {size:100px; content: "\\f0d9"}'))),
tags$head(tags$style(HTML('.main-header .sidebar-toggle:after {size:100px; content: "\\f0da"}'))),
tags$head(tags$style(HTML("hr {border-top: 1px dashed #b7b7b7;}"))),
tags$head(tags$style(HTML(".btn {border-radius: 30px;} .btn:hover {transform: scale(1.05);}"))),
tags$head(tags$style(HTML(".bttn-fill.bttn-primary {background: #ddd;color: #333;}.bttn-fill.bttn-sm {padding: 4px 10px;font-size: 16px;font-family: inherit;}.bttn {border-radius: 0px;border-color: #555;}"))),
tags$head(tags$style(HTML(".bttn-bordered.bttn-primary {background: #fff;color: #600;border-radius: 5px; border-color: #600} .bttn-bordered.bttn-primary:hover, .bttn-bordered.bttn-primary:focus {background: #600;color: #fff;}"))),
tags$head(tags$style(HTML(".bttn-minimal.bttn-default {background: #fff;color: #333;border-color: #fff;}"))),
tags$head(tags$style(HTML("a {color: #333} a:hover, a:focus, a:active, a:visited {color: #1d89ff;}"))),
tags$head(tags$style(HTML(".multicol2 {-webkit-column-count: 1; /* Chrome, Safari, Opera */ -moz-column-count: 1; /* Firefox */ column-count: 1;}"))),
tags$head(tags$style(HTML(".multicol5 {-webkit-column-count: 5; /* Chrome, Safari, Opera */ -moz-column-count: 5; /* Firefox */ column-count: 5;}"))),
tags$head(tags$style(HTML(".content-wrapper, .right-side { background-color: #FFF;}"))),
tags$head(tags$style(HTML(".card { width: 80%;}"))),
tags$head(tags$style(HTML(".img-round { width: 80%;}"))),
BODY,
bsModal(
id = "quickGENE",
title = "Quick gene view",
trigger = '',
size = "large",
htmlOutput("quickResults")
)
)
)
require(shinydashboard)
load('data/minimal-data.RData')
source('R/custom_R_functions.R')
require(shiny)
require(shinydashboard)
require(shinyWidgets)
require(shinycssloaders)
require(shinyBS)
require(magrittr)
require(GenomicRanges)
require(devtools)
require(DT)
require(urltools)
require(htmltools)
require(httr)
require(gProfileR)
require(pheatmap)
require(d3heatmap)
require(RColorBrewer)
require(apputils)
require(venneuler)
load('dashbord.Ahringer/releases/dev/data/minimal-data.RData')
shinyApp('app.R')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages('shinydashboard')
install.packages('shinyWidgets')
install.packages('shinycssloaders')
install.packages(c('shinyBS', magrittr))
install.packages(c('shinyBS', 'magrittr'))
install.packages(c("shinyBS", "magrittr"))
install.packages(c('GenomicRanges', 'devtools', 'DT', 'urltools', 'httr', 'gProfileR', 'pheatmap', 'd3heatmap', 'RColoprBrewer', 'apputils', 'venneuler'))
require(shiny)
require(shinydashboard)
require(shinyWidgets)
require(shinycssloaders)
require(shinyBS)
require(magrittr)
require(GenomicRanges)
require(devtools)
require(DT)
require(urltools)
require(htmltools)
require(httr)
require(gProfileR)
require(pheatmap)
require(d3heatmap)
require(RColorBrewer)
require(apputils)
require(venneuler)
shiny::runApp()
install.packages('apputils')
devtools::install_github("leonawicz/apputils")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
genes.g
genes.gtd
genes.gtf
load('../dashboard.Ahringer/releases/dev/data/minimal-data.RData')
genes.gtf
source('../dashboard.Ahringer/releases/dev/R/custom_R_functions.R')
require(shiny)
require(shinydashboard)
require(shinyWidgets)
require(shinycssloaders)
require(shinyBS)
require(magrittr)
require(GenomicRanges)
require(devtools)
require(DT)
require(urltools)
require(htmltools)
require(httr)
require(gProfileR)
require(pheatmap)
require(d3heatmap)
require(RColorBrewer)
require(apputils)
# require(venneuler)
# Define variables
colorGO <- c("#52c23164","#20109564","#ef690664", "white")
names(colorGO) <- c("MF", "BP", "CC", "kegg")
all.deconv <- cbind(all, ATAC, max.tissue.df[, grepl('max.tissue|ratio', colnames(max.tissue.df))]) %>% dplyr::mutate(uniqueWormBaseID = strsplit(as.character(WormBaseID),',')) %>% tidyr::unnest(uniqueWormBaseID)
atac.dt <- cbind(all[, grepl('chr|start|stop|gene_name|regulatory_class|domain|which.tissues', colnames(all))], round(ATAC, 3), max.tissue.df[, grepl('max.tissue$', colnames(max.tissue.df))])
row.names(atac.dt) <- all$coords
colnames(atac.dt)[colnames(atac.dt) == 'gene_name'] <- "geneID"
colnames(atac.dt)[grep(paste(order.tissues, collapse = '|'), colnames(atac.dt))] <- paste0(order.tissues[1:length(grep(paste(order.tissues, collapse = '|'), colnames(atac.dt)))], '_TPM')
atac.dt$regulatory_class <- factor(atac.dt$regulatory_class)
atac.dt$domain <- factor(atac.dt$domain)
lcap.dt <- cbind(as.data.frame(genes.gtf)[,c(1:3,5,10,11,13,16,18)], round(LCAP, 3), max.tissue.df.LCAP[, grepl('max.tissue$', colnames(max.tissue.df.LCAP))])
colnames(lcap.dt)[1:3] <- c('chr', 'start', 'stop')
colnames(lcap.dt)[colnames(lcap.dt) == 'gene_id'] <- "WormBaseID"
colnames(lcap.dt)[colnames(lcap.dt) == 'gene_name'] <- "geneID"
lcap.dt$gene_biotype <- factor(lcap.dt$gene_biotype)
lcap.dt$domain <- factor(lcap.dt$domain)
hypod.genes <- row.names(max.tissue.df.LCAP)[max.tissue.df.LCAP$which.tissues == 'Hypod.']
neurons.genes <- row.names(max.tissue.df.LCAP)[max.tissue.df.LCAP$which.tissues == 'Neurons']
germline.genes <- row.names(max.tissue.df.LCAP)[max.tissue.df.LCAP$which.tissues == 'Germline']
muscle.genes <- row.names(max.tissue.df.LCAP)[max.tissue.df.LCAP$which.tissues == 'Muscle']
intest.genes <- row.names(max.tissue.df.LCAP)[max.tissue.df.LCAP$which.tissues == 'Intest.']
list.genes <- list(hypod.genes, neurons.genes, germline.genes, muscle.genes, intest.genes)
names(list.genes) <- c("germline.genes", "neurons.genes", "muscle.genes", "hypod.genes", 'intest.genes')
colors.decimals <- c(0.10395294, 0.3906374, 0.1192665, 0.14261010, 0.14226132, 0.13421772)
link <- "http://ahringerlab.com/JBrowse-1.12.5/index.html?data=data%2Fjson%2Fce11&loc=chrIII&tracks=genes%2Cregulatory_elements%2Chypod.atac%2Cneurons.atac%2Cgonad.atac%2Cmuscle.atac%2Cintest.atac%2Chypod.lcap.fwd%2Cneurons.lcap.fwd%2Cgonad.lcap.fwd%2Cmuscle.lcap.fwd%2Cintest.lcap.fwd%2Chypod.lcap.rev%2Cneurons.lcap.rev%2Cgonad.lcap.rev%2Cmuscle.lcap.rev%2Cintest.lcap.rev%2Ctranscripts&highlight=&menu=1&nav=1&tracklist=1&overview=1"
NCLUST_LCAPdev <- 5
NCLUST_LCAP <- 5
NCLUST_ATAC <- 5
version <- gsub("../dashboard.Ahringer_", "", list.dirs('..', recursive = F)[length(list.dirs('..', recursive = F)) - 1])
# Function to generate an URL to visit jserizay.site/JBrowse
getURL <- function (chr, start, end, release = "1.12.5",
tracks = c("genes", "regulatory_elements", "hypod.atac", "neurons.atac", "gonad.atac", "muscle.atac", "intest.atac", "hypod.lcap.fwd", "neurons.lcap.fwd", "gonad.lcap.fwd", "muscle.lcap.fwd", "intest.lcap.fwd", "hypod.lcap.rev", "neurons.lcap.rev", "gonad.lcap.rev", "muscle.lcap.rev", "intest.lcap.rev", "transcripts"),
show_menu = TRUE, show_navigation = TRUE, show_tracklist = TRUE, show_overview = TRUE)
{
baseurl <- paste0("http://ahringerlab.com/JBrowse-", release, "/index.html")
range <- if (missing(start) || missing(end)) {""} else { paste0("%3A", paste0( round(start - 0.25 * (end - start + 1)), "..", round(end + 0.25 * (end - start + 1)) )) }
tracks <- paste(unique(tracks), collapse = "%2C")
menu <- if (show_menu) {"&menu=1"} else {"&menu=0"}
navigation <- if (show_navigation) {"&nav=1"} else {"&nav=0"}
tracklist <- if (show_tracklist) {"&tracklist=1"} else {"&tracklist=0"}
overview <- if (show_overview) {"&overview=1"} else {"&overview=0"}
url <- param_set(baseurl, key = "data", value = "data%2Fjson%2Fce11")
url <- param_set(url, key = "loc", value = paste0(chr, range))
url <- param_set(url, key = "tracks", value = tracks)
return(paste0(url, "&highlight=", navigation, tracklist, overview))
}
# Function to input several genes separated by newlines
textareaInput <- function(inputId, label, value = "", placeholder = "", rows = 2)
{
tagList(
div(strong(label), style="margin-top: 5px;"),
tags$style(type="text/css", "textarea {width:100%; margin-top: 5px;}"),
tags$textarea(id = inputId, placeholder = placeholder, rows = rows, value))
}
# Function to bypass idle time of Shiny Server
inactivity <- "function idleTimer() {
var t = setTimeout(logout, 500000000);
window.onmousemove = resetTimer; // catches mouse movements
window.onmousedown = resetTimer; // catches mouse movements
window.onclick = resetTimer;     // catches mouse clicks
window.onscroll = resetTimer;    // catches scrolling
window.onkeypress = resetTimer;  //catches keyboard actions
function logout() {
window.close();  //close the window
}
function resetTimer() {
clearTimeout(t);
t = setTimeout(logout, 500000000);  // time is in milliseconds (1000 is 1 second)
}
}
idleTimer();"
shiny::runApp()
load('../dashboard.Ahringer/releases/dev/data/minimal-data.RData')
shiny::runApp()
load('../dashboard.Ahringer/releases/dev/data/minimal-data.RData')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd('../dashboard.Ahringer/releases/dev/')
shiny::runApp('../../../test/app.R')
setwd('Documents/PhD/__Bioinfo/_shinyapps/t')
setwd('~/Documents/PhD/__Bioinfo/_shinyapps')
setwd('~/_shinyapps/test/')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
