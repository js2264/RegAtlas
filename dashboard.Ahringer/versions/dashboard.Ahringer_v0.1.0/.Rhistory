TAB2 <- tabPanel(
title = 'Gene look-up',
h2("Look at single genes"),
fluidRow( # <--- INPUT searchGene
column(width = 6, {
searchInput(
inputId = "searchGene",
label = "Enter a single gene name:",
value = "lmd-2",
btnSearch = icon("search", lib = "glyphicon"),
btnReset = icon("remove", lib = "glyphicon"),
width = "95%"
)
})
),
fluidRow( # ---> This displays the gene name and WBID
column(width = 6, {
verbatimTextOutput("gene")
}),
column(width = 6, {
verbatimTextOutput("WB")
})
),
fluidRow( # ---> This is for the proms/gene tSNE
column(width = 5, {
dataTableOutput("REs.table")
}),
column(width = 7, {
plotOutput("tSNE.plots", height = '400px')
})
)
)
TAB3 <- tabPanel(
title = 'Genes look-up',
h2("Look-up multiple genes"),
fluidRow( # ---> This displays the gene name and WBID
column(width = 6, {
verbatimTextOutput("gene")
}),
column(width = 6, {
verbatimTextOutput("WB")
})
)
)
ui <- navbarPage(
title = "AhringR lab", id = 'nvpage',
TAB1,
TAB2,
TAB3
)
shinyApp(ui, server)
ui <- navbarPage(
title = "AhringR lab", id = 'nvpage',
TAB2,
TAB1,
TAB3
)
shinyApp(ui, server)
?renderJbrowse
getURL("chrIII", "1", "13000000")
JbrowseOutput(renderJbrowse(iframeJbrowse(getURL("chrIII", "1", "13000000"))), height = '600px')
renderJbrowse(iframeJbrowse(getURL("chrIII", "1", "13000000")))
JbrowseOutput(renderJbrowse(iframeJbrowse(getURL("chrIII", "1", "13000000"))), height = '600px')
TAB1 <- tabItem(
tabName = 'browser',
h2("Tissue-specific genome browser"),
fluidRow( # ---> OUTPUT jbrowser
column(width = 12, {
JbrowseOutput(renderJbrowse(iframeJbrowse(getURL("chrIII", "1", "13000000"))), height = '1200px')
})
)
)
TAB2 <- tabItem(
tabName = 'genelookup',
h2("Look-up single genes"),
fluidRow( # <--- INPUT searchGene
column(width = 6, {
searchInput(
inputId = "searchGene",
label = "Enter a single gene name:",
value = "lmd-2",
btnSearch = icon("search", lib = "glyphicon"),
btnReset = icon("remove", lib = "glyphicon"),
width = "95%"
)
})
),
fluidRow( # ---> This displays the gene name and WBID
column(width = 6, {
verbatimTextOutput("gene")
}),
column(width = 6, {
verbatimTextOutput("WB")
})
),
fluidRow( # ---> This is for the proms/gene tSNE
column(width = 5, {
dataTableOutput("REs.table")
}),
column(width = 7, {
plotOutput("tSNE.plots", height = '400px')
})
)
)
SIDEBAR <- sidebarMenu(
#menuItem("Genome browser", tabName = "browser", icon = icon("area-chart", lib = "font-awesome")),
#menuItem("Look-up multiple genes", tabName = "geneslookup", icon = icon("ellipsis-h", lib = "font-awesome")),
menuItem("Look-up gene", tabName = "genelookup", icon = icon("ellipsis-h", lib = "font-awesome"))
)
BODY <- tabItems(TAB2, TAB1)
ui <- dashboardPage(
dashboardHeader(title = "Ahringer lab"),
dashboardSidebar(SIDEBAR),
dashboardBody(BODY)
)
shinyApp(ui, server)
TAB2 <- tabItem(
tabName = 'genelookup',
h2("Look-up single genes"),
fluidRow( # <--- INPUT searchGene
column(width = 6, {
searchInput(
inputId = "searchGene",
label = "Enter a single gene name:",
value = "lmd-2",
btnSearch = icon("search", lib = "glyphicon"),
btnReset = icon("remove", lib = "glyphicon"),
width = "95%"
)
})
),
fluidRow( # ---> This displays the gene name and WBID
column(width = 6, {
verbatimTextOutput("gene")
}),
column(width = 6, {
verbatimTextOutput("WB")
})
),
fluidRow( # ---> This is for the proms/gene tSNE
column(width = 5, {
dataTableOutput("REs.table")
}),
column(width = 7, {
plotOutput("tSNE.plots", height = '400px')
})
)
)
SIDEBAR <- sidebarMenu(
#menuItem("Genome browser", tabName = "browser", icon = icon("area-chart", lib = "font-awesome")),
#menuItem("Look-up multiple genes", tabName = "geneslookup", icon = icon("ellipsis-h", lib = "font-awesome")),
menuItem("Look-up gene", tabName = "genelookup", icon = icon("ellipsis-h", lib = "font-awesome"))
)
BODY <- tabItems(TAB2)
ui <- dashboardPage(
dashboardHeader(title = "Ahringer lab"),
dashboardSidebar(SIDEBAR),
dashboardBody(BODY)
)
shinyApp(ui, server)
SIDEBAR <- sidebarMenu(
menuItem("Genome browser", tabName = "browser", icon = icon("area-chart", lib = "font-awesome")),
#menuItem("Look-up multiple genes", tabName = "geneslookup", icon = icon("ellipsis-h", lib = "font-awesome")),
menuItem("Look-up gene", tabName = "genelookup", icon = icon("ellipsis-h", lib = "font-awesome"))
)
BODY <- tabItems(TAB1, TAB2)
ui <- dashboardPage(
dashboardHeader(title = "Ahringer lab"),
dashboardSidebar(SIDEBAR),
dashboardBody(BODY)
)
shinyApp(ui, server)
TAB1 <- tabItem(
tabName = 'browser',
h2("Tissue-specific genome browser"),
fluidRow( # ---> OUTPUT jbrowser
column(width = 12, {
JbrowseOutput("browser", height = '600px')
})
)
)
SIDEBAR <- sidebarMenu(
menuItem("Genome browser", tabName = "browser", icon = icon("area-chart", lib = "font-awesome")),
#menuItem("Look-up multiple genes", tabName = "geneslookup", icon = icon("ellipsis-h", lib = "font-awesome")),
menuItem("Look-up gene", tabName = "genelookup", icon = icon("ellipsis-h", lib = "font-awesome"))
)
BODY <- tabItems(TAB1, TAB2)
ui <- dashboardPage(
dashboardHeader(title = "Ahringer lab"),
dashboardSidebar(SIDEBAR),
dashboardBody(BODY)
)
shinyApp(ui, server)
runApp('~/Documents/PhD/__Bioinfo/_shinyapps/test_dashboard')
TAB1 <- tabItem(
tabName = 'browser',
h2("Tissue-specific genome browser"),
fluidRow( # ---> OUTPUT jbrowser
column(width = 12, {
JbrowseOutput("browser", height = '600px')
})
)
)
TAB2 <- tabItem(
tabName = 'genelookup',
h2("Look-up single genes"),
fluidRow( # <--- INPUT searchGene
column(width = 6, {
searchInput(
inputId = "searchGene",
label = "Enter a single gene name:",
value = "lmd-2",
btnSearch = icon("search", lib = "glyphicon"),
btnReset = icon("remove", lib = "glyphicon"),
width = "95%"
)
})
),
fluidRow( # ---> OUTPUT jbrowser
column(width = 12, {
JbrowseOutput("browser", height = '600px')
})
),
fluidRow( # ---> This is for the proms/gene tSNE
column(width = 5, {
dataTableOutput("REs.table")
}),
column(width = 7, {
plotOutput("tSNE.plots", height = '400px')
})
)
)
SIDEBAR <- sidebarMenu(
menuItem("Genome browser", tabName = "browser", icon = icon("area-chart", lib = "font-awesome")),
#menuItem("Look-up multiple genes", tabName = "geneslookup", icon = icon("ellipsis-h", lib = "font-awesome")),
menuItem("Look-up gene", tabName = "genelookup", icon = icon("ellipsis-h", lib = "font-awesome"))
)
BODY <- tabItems(TAB1, TAB2)
ui <- dashboardPage(
dashboardHeader(title = "Ahringer lab"),
dashboardSidebar(SIDEBAR),
dashboardBody(BODY)
)
shinyApp(ui, server)
runApp('~/Documents/PhD/__Bioinfo/_shinyapps/test_dashboard')
runApp('~/Documents/PhD/__Bioinfo/_shinyapps/test_dashboard')
runApp('~/Documents/PhD/__Bioinfo/_shinyapps/test_dashboard')
?hr
LCAP[infos.gene$Gene.info[1],]
infos.gene <- getGeneInfos('egl-13')
infos.gene <- getGeneInfos('egl-13', saveTXT = F, verbose = F, exportResult = T)
infos.gene
LCAP[infos.gene$Gene.info[1],]
max.tissue.df.LCAP[infos.gene$Gene.info[1],12:16]
barplot(max.tissue.df.LCAP[infos.gene$Gene.info[1],12:16])
barplot(table(max.tissue.df.LCAP[infos.gene$Gene.info[1],12:16]))
barplot(as.matrix(max.tissue.df.LCAP[infos.gene$Gene.info[1],12:16]))
infos.gene$Gene.expr.TPM[2,]
barplot(infos.gene$Gene.expr.TPM[2,])
barplot(as.matrix(infos.gene$Gene.expr.TPM[2,]))
barplot(as.matrix(infos.gene$Gene.expr.TPM[2,]), col = color.tissues, ylab = "Expr./tissue\n(TPM)")
color.tissues
as.matrix(infos.gene$Gene.expr.TPM[2,])
barplot(as.matrix(infos.gene$Gene.expr.TPM[2,]), col = color.tissues, ylab = "Expr./tissue\n(TPM)")
par(mar=c(2,2,2,2))
barplot(as.matrix(infos.gene$Gene.expr.TPM[2,]), col = color.tissues, ylab = "Expr./tissue\n(TPM)")
par(mar=c(5,5,5,5))
barplot(as.matrix(infos.gene$Gene.expr.TPM[2,]), col = color.tissues, ylab = "Expr./tissue\n(TPM)")
barplot(as.matrix(infos.gene$Gene.expr.TPM[2,]), col = color.tissues, ylab = "Expr./tissue (TPM)")
par(mar=c(5,5,2,2))
barplot(as.matrix(infos.gene$Gene.expr.TPM[2,]), col = color.tissues, ylab = "Expr./tissue (TPM)")
par(mar=c(4,5,2,2))
barplot(as.matrix(infos.gene$Gene.expr.TPM[2,]), col = color.tissues, ylab = "Expr./tissue (TPM)")
barplot(as.matrix(infos.gene$Gene.expr.TPM[2,]), col = color.tissues, ylab = "Expr. / tissue (TPM)")
?barplot
barplot(as.vector(infos.gene$Gene.expr.TPM[2,]), col = color.tissues, ylab = "Expr. / tissue (TPM)")
barplot(as.numeric(infos.gene$Gene.expr.TPM[2,]), col = color.tissues, ylab = "Expr. / tissue (TPM)")
barplot(as.vector(infos.gene$Gene.expr.TPM[2,]), col = color.tissues, ylab = "Expr. / tissue (TPM)")
barplot(as.numeric(infos.gene$Gene.expr.TPM[2,]), col = color.tissues, ylab = "Expr. / tissue (TPM)", names = order.tissues[1:5])
infos.gene$Gene.expr.dev.TPM
plot(infos.gene$Gene.expr.dev.TPM, type = 'l')
plot(infos.gene$Gene.expr.dev.TPM)
infos.gene$Gene.expr.dev.TPM
as.vector(infos.gene$Gene.expr.dev.TPM)
as.numeric(infos.gene$Gene.expr.dev.TPM)
plot(as.numeric(infos.gene$Gene.expr.dev.TPM))
plot(as.numeric(infos.gene$Gene.expr.dev.TPM), type='l')
?plot
setwd('../dashboard.Ahringer/rsconnect/')
plot(as.numeric(infos.gene$Gene.expr.dev.TPM), type = 'l', lty = 1, lwd = 3)
plot(as.numeric(infos.gene$Gene.expr.dev.TPM), type = 'l', lty = 1, lwd = 3, xlab = "", ylab = "Expr. (TPM) over time, labels = c('Emb.', 'L1', 'L2', 'L3', 'L4', 'YA'))
plot(as.numeric(infos.gene$Gene.expr.dev.TPM), type = 'l', lty = 1, lwd = 3, xlab = "", ylab = "Expr. (TPM) over time", labels = c('Emb.', 'L1', 'L2', 'L3', 'L4', 'YA'))
plot(as.numeric(infos.gene$Gene.expr.dev.TPM), type = 'l', lty = 1, lwd = 3, xlab = "", ylab = "Expr. (TPM) over time", labels = c('Emb.', 'L1', 'L2', 'L3', 'L4', 'YA'), at = 1:6)
warnings()
plot(as.numeric(infos.gene$Gene.expr.dev.TPM), type = 'l', lty = 1, lwd = 3, xlab = "", ylab = "Expr. (TPM) over time", labels = c('Emb.', 'L1', 'L2', 'L3', 'L4', 'YA'), at = 1:6)
plot(as.numeric(infos.gene$Gene.expr.dev.TPM), type = 'l', lty = 1, lwd = 3, xlab = "", ylab = "Expr. (TPM) over time", labels = c('Emb.', 'L1', 'L2', 'L3', 'L4', 'YA'), at = 1:6)
plot(as.numeric(infos.gene$Gene.expr.dev.TPM), type = 'l', lty = 1, lwd = 3, xlab = "", ylab = "Expr. (TPM) over time", labels = c('Emb.', 'L1', 'L2', 'L3', 'L4', 'YA'), at = 1:6, bty = 'n')
plot(as.numeric(infos.gene$Gene.expr.dev.TPM), type = 'l', lty = 1, lwd = 3, xlab = "", ylab = "Expr. (TPM) over time", labels = c('Emb.', 'L1', 'L2', 'L3', 'L4', 'YA'), at = 1:6, bty = 'n')
infos.gene$Gene.expr.TPM
infos.gene$Gene.expr.dev.TPM
max(infos.gene$Gene.expr.dev.TPM)
max(infos.gene$Associated.REs.dev)
infos.gene$Associated.REs.dev
infos.gene$Gene.expr.TPM
infos.gene$Gene.expr.TPM[2,]
as.numeric(infos.gene$Gene.expr.TPM[2,])
head(order(LCAP[,TISSUE])
)
TISSUE='Gonad'
)
head(order(LCAP[,TISSUE]))
head(sort(LCAP[,TISSUE]))
tail(sort(LCAP[,TISSUE]))
which(sort(LCAP[,TISSUE]) == infos.gene$Gene.expr.TPM[2,TISSUE])
infos.gene$Gene.expr.TPM[2,TISSUE]
sort(LCAP[genes.gtf$is.prot.cod,TISSUE]
head(sort(LCAP[genes.gtf$is.prot.cod,TISSUE]))
class(infos.gene$Gene.expr.TPM[2,TISSUE])
?rank
length(LCAP[,TISSUE])
infos.gene$Gene.expr.TPM[2,TISSUE]
grep(infos.gene$Gene.expr.TPM[2,TISSUE], LCAP[,TISSUE])
grep(infos.gene$Gene.expr.TPM[2,TISSUE], sort(LCAP[,TISSUE])
)
head(sort(LCAP[,TISSUE]))
sort(LCAP[,TISSUE])[grep(infos.gene$Gene.expr.TPM[2,TISSUE], sort(LCAP[,TISSUE])]
plot(
as.numeric(infos.gene$Gene.expr.dev.TPM),
type = 'l', lty = 1, lwd = 3, xlab = "", ylab = "Expr. (TPM) over time",
labels = c('Emb.', 'L1', 'L2', 'L3', 'L4', 'YA'), at = 1:6, bty = 'n',
main = "Tissue-specific gene expression"
)
plot(
as.numeric(infos.gene$Gene.expr.dev.TPM),
type = 'l', lty = 1, lwd = 3, xlab = "", ylab = "Expr. (TPM) over time",
bty = 'n')
warnings()
plot(
as.numeric(infos.gene$Gene.expr.dev.TPM),
type = 'l', lty = 1, lwd = 3, xlab = "", ylab = "Expr. (TPM) over time",
bty = 'n')
plot(
as.numeric(infos.gene$Gene.expr.dev.TPM),
type = 'l', lty = 1, lwd = 3, xlab = "", ylab = "Expr. (TPM) over time",
bty = 'n', names = c('Emb.', 'L1', 'L2', 'L3', 'L4', 'YA'), at = 1:6,
main = "Tissue-specific gene expression"
)
vec <- as.numeric(infos.gene$Gene.expr.dev.TPM
names(vec) <- c('Emb.', 'L1', 'L2', 'L3', 'L4', 'YA')
#1: Plot expr. during development
par(mar=c(4,5,2,2))
plot(
vec),
type = 'l', lty = 1, lwd = 3, xlab = "", ylab = "Expr. (TPM) over time",
bty = 'n', main = "Tissue-specific gene expression"
)
vec <- as.numeric(infos.gene$Gene.expr.dev.TPM)
names(vec) <- c('Emb.', 'L1', 'L2', 'L3', 'L4', 'YA')
#1: Plot expr. during development
par(mar=c(4,5,2,2))
plot(
vec),
type = 'l', lty = 1, lwd = 3, xlab = "", ylab = "Expr. (TPM) over time",
bty = 'n', main = "Tissue-specific gene expression"
)
#2: Plot expr. / tissue
vec <- as.numeric(infos.gene$Gene.expr.dev.TPM)
names(vec) <- c('Emb.', 'L1', 'L2', 'L3', 'L4', 'YA')
#1: Plot expr. during development
par(mar=c(4,5,2,2))
plot(
vec,
type = 'l', lty = 1, lwd = 3, xlab = "", ylab = "Expr. (TPM) over time",
bty = 'n', main = "Tissue-specific gene expression"
)
vec
vec
plot(NA, xlim = c(0, 6), ylim = c(min(vec), max(vec)), xlab = "", ylab = "Expr. (TPM) over time", bty = 'n',
)
plot(NA, xlim = c(1, 6), ylim = c(min(vec), max(vec)), xlab = "", ylab = "Expr. (TPM) over time", bty = 'n', axes = T)
xaxt='n'
plot(
as.numeric(infos.gene$Gene.expr.dev.TPM),
type = 'l', lty = 1, lwd = 3, xlab = "", ylab = "Expr. (TPM) over time",
labels = c('Emb.', 'L1', 'L2', 'L3', 'L4', 'YA'), at = 1:6, bty = 'n',
main = "Tissue-specific gene expression", xaxt = 'n')
plot(
as.numeric(infos.gene$Gene.expr.dev.TPM),
type = 'l', lty = 1, lwd = 3, xlab = "", ylab = "Expr. (TPM) over time", bty = 'n',
main = "Tissue-specific gene expression", xaxt = 'n')
plot(
as.numeric(infos.gene$Gene.expr.dev.TPM),
type = 'l', lty = 1, lwd = 3, xlab = "", ylab = "Expr. (TPM) over time", bty = 'n',
main = "Tissue-specific gene expression", xaxt = 'n')
axes(1, labels = c('Emb.', 'L1', 'L2', 'L3', 'L4', 'YA'), at = 1:6)
axis(1, labels = c('Emb.', 'L1', 'L2', 'L3', 'L4', 'YA'), at = 1:6)
sort(LCAP[,TISSUE])[grep(infos.gene$Gene.expr.TPM[2,TISSUE], sort(LCAP[,TISSUE])]
sort(LCAP[,TISSUE])[grep(infos.gene$Gene.expr.TPM[2,TISSUE], sort(LCAP[,TISSUE]))]
sort(LCAP[,TISSUE])[grep(infos.gene$Gene.expr.TPM[2,TISSUE], sort(LCAP[,TISSUE]))]
infos.gene$Gene.expr.TPM[2,TISSUE]
paste0("^", infos.gene$Gene.expr.TPM[2,TISSUE], "$")
sort(LCAP[,TISSUE])[grep(paste0("^", infos.gene$Gene.expr.TPM[2,TISSUE], "$"), sort(LCAP[,TISSUE]))]
sort(LCAP[,TISSUE])[grep(paste0("^", infos.gene$Gene.expr.TPM[2,TISSUE]), sort(LCAP[,TISSUE]))]
grep(paste0("^", infos.gene$Gene.expr.TPM[2,TISSUE]), sort(LCAP[,TISSUE]))
grep(paste0("^", infos.gene$Gene.expr.TPM[2,TISSUE]), sort(LCAP[,TISSUE]))[1]
grep(paste0("^", infos.gene$Gene.expr.TPM[2,TISSUE]), sort(LCAP[,TISSUE]))[1]/nrow(LCAP)
trunc(grep(paste0("^", infos.gene$Gene.expr.TPM[2,TISSUE]), sort(LCAP[,TISSUE]))[1]/nrow(LCAP), 1)
trunc(grep(paste0("^", infos.gene$Gene.expr.TPM[2,TISSUE]), sort(LCAP[,TISSUE]))[1]/nrow(LCAP), 2)
trunc(grep(paste0("^", infos.gene$Gene.expr.TPM[2,TISSUE]), sort(LCAP[,TISSUE]))[1]/nrow(LCAP), 3)
trunc(grep(paste0("^", infos.gene$Gene.expr.TPM[2,TISSUE]), sort(LCAP[,TISSUE]))[1]/nrow(LCAP), 4)
?trunc
ceiling(grep(paste0("^", infos.gene$Gene.expr.TPM[2,TISSUE]), sort(LCAP[,TISSUE]))[1]/nrow(LCAP), 1)
ceiling(grep(paste0("^", infos.gene$Gene.expr.TPM[2,TISSUE]), sort(LCAP[,TISSUE]))[1]/nrow(LCAP))
ceiling(grep(paste0("^", infos.gene$Gene.expr.TPM[2,TISSUE]), sort(LCAP[,TISSUE]))[1]/nrow(LCAP)*10)
decile.val <- c()
for (TISSUE in order.tissues[1:5]) { decile.val[TISSUE] <- ceiling(grep(paste0("^", infos.gene$Gene.expr.TPM[2,TISSUE]), sort(LCAP[,TISSUE]))[1]/nrow(LCAP)*10) }
decile.val
infos.gene
GENE
GENE='hlh-1'
infos.gene <- getGeneInfos((GENE))
infos.gene <- getGeneInfos((GENE), saveTXT = F, verbose = F, exportResult = T)
infos.gene
decile.val <- c()
for (TISSUE in order.tissues[1:5]) { decile.val[TISSUE] <- ceiling(grep(paste0("^", infos.gene$Gene.expr.TPM[2,TISSUE]), sort(LCAP[,TISSUE]))[1]/nrow(LCAP)*10) }
decile.val
quantile(LCAP[,TISSUE], prob = seq(0, 1, length = 11)
)
quantile(LCAP[,TISSUE], prob = seq(0, 1, length = 11))
?quantile
cut( infos.gene$Gene.expr.TPM[2,TISSUE], quantile(LCAP[,TISSUE], prob = seq(0, 1, length = 11))
)
cut(infos.gene$Gene.expr.TPM[2,TISSUE], quantile(LCAP[,TISSUE], prob = seq(0, 1, length = 11))
)
cut(infos.gene$Gene.expr.TPM[2,TISSUE], quantile(LCAP[,TISSUE], prob = seq(0, 1, length = 11)))
quantile(LCAP[,TISSUE], prob = seq(0, 1, length = 11))
infos.gene$Gene.expr.TPM[2,TISSUE]
cut(infos.gene$Gene.expr.TPM[2,TISSUE], quantile(LCAP[,TISSUE][LCAP[,TISSUE] > 0,], prob = seq(0, 1, length = 11)))
cut(infos.gene$Gene.expr.TPM[2,TISSUE], quantile(LCAP[,TISSUE][LCAP[,TISSUE] > 0], prob = seq(0, 1, length = 11)))
quantile(LCAP[,TISSUE][LCAP[,TISSUE] > 0], prob = seq(0, 1, length = 11))
as.numeric(cut(infos.gene$Gene.expr.TPM[2,TISSUE], quantile(LCAP[,TISSUE][LCAP[,TISSUE] > 0], prob = seq(0, 1, length = 11))))
decile.val <- c()
for (TISSUE in order.tissues[1:5]) { decile.val[TISSUE] <- as.numeric(cut(infos.gene$Gene.expr.TPM[2,TISSUE], quantile(LCAP[,TISSUE][LCAP[,TISSUE] > 0], prob = seq(0, 1, length = 11)))) }
decile.val
hlh-1
decile.val <- c()
for (TISSUE in order.tissues[1:5]) { decile.val[TISSUE] <- 10 - as.numeric(cut(infos.gene$Gene.expr.TPM[2,TISSUE], quantile(LCAP[,TISSUE][LCAP[,TISSUE] > 0], prob = seq(0, 1, length = 11)))) }
decile.val
matrix(NA, nrow = 10, ncol = 5)
decile.val <- c()
for (TISSUE in order.tissues[1:5]) { decile.val[TISSUE] <- 10 - as.numeric(cut(infos.gene$Gene.expr.TPM[2,TISSUE], quantile(LCAP[,TISSUE][LCAP[,TISSUE] > 0], prob = seq(0, 1, length = 11)))) }
mat <- matrix(NA, nrow = 10, ncol = 5)
for (TISSUE in order.tissues[1:5]) { mat[decile.val[TISSUE],which(order.tissues == TISSUE)] = 1 }
mat
image(mat)
image(t(mat))
decile.val <- c()
for (TISSUE in order.tissues[1:5]) { decile.val[TISSUE] <- as.numeric(cut(infos.gene$Gene.expr.TPM[2,TISSUE], quantile(LCAP[,TISSUE][LCAP[,TISSUE] > 0], prob = seq(0, 1, length = 11)))) }
mat <- matrix(NA, nrow = 10, ncol = 5)
for (TISSUE in order.tissues[1:5]) { mat[decile.val[TISSUE],which(order.tissues == TISSUE)] = 1 }
image(t(mat))
setwd('~/Documents/PhD/__Bioinfo/_shinyapps/dashboard.Ahringer/')
source('../../_scripts/bin/useful_R_functions.R')
source('../../_scripts/R-functions/heatmap_parmfrrow.R)
source('../../_scripts/R-functions/heatmap_parmfrrow.R')
heatmap_parmfrow(t(mat))
heatmap_parmfrow(t(mat), breaks = c(0:1))
h <- heatmap_parmfrow(mat, nrow = rows, ncol = cols), breaks = c(0:1))
h <- heatmap_parmfrow(mat, breaks = c(0:1))
h <- heatmap_parmfrow(mat, breaks = c(0:1), scaleUP = 1, scaleUP.bis = 1)
source('bin/R-functions/heatmap_parmfrrow.R')
source('bin/heatmap_parmfrrow.R')
h <- heatmap_parmfrow(mat, breaks = c(0:1), scaleUP = 1, scaleUP.bis = 1, plotKey = F)
h <- heatmap_parmfrow(mat, breaks = c(0:1), scaleUP = 1, scaleUP.bis = 1, plotKey = F, labCol = order.tissues[1:5], labRow = as.character(10:1))
h <- heatmap_parmfrow(mat, breaks = c(0:1), scaleUP = 1, scaleUP.bis = 1, plotKey = F, labCol = order.tissues[1:5], labRow = as.character(10:1), margins = c(5, 1, 1, 5), ylab = "Decile of tissue-specific gene expr.")
h <- heatmap_parmfrow(mat, breaks = c(0:1), scaleUP = 1, scaleUP.bis = 1, plotKey = F, labCol = order.tissues[1:5], labRow = as.character(10:1), margins = c(6, 1, 1, 5), ylab = "Decile of tissue-specific gene expr.")
h <- heatmap_parmfrow(mat, breaks = c(0:1), scaleUP = 1, scaleUP.bis = 1, plotKey = F, labCol = order.tissues[1:5], labRow = as.character(10:1), margins = c(6, 1, 1, 5), ylab = "Decile of tissue-specific gene expr.", plotSep = T)
h <- heatmap_parmfrow(mat, breaks = c(0:1), scaleUP = 1, scaleUP.bis = 1, plotKey = F, labCol = order.tissues[1:5], labRow = as.character(10:1), margins = c(6, 1, 1, 5), ylab = "Decile of tissue-specific gene expr.", plotSep = T, colSep = 'black')
sum(max.tissues.df$which.tissues != 'Low')
sum(max.tissue.df$which.tissues != 'Low')
decile.val <- c()
for (TISSUE in order.tissues[1:5]) { decile.val[TISSUE] <- as.numeric(cut(infos.gene$Gene.expr.TPM[2,TISSUE], quantile(LCAP[,TISSUE][max.tissue.df.LCAP$which.tissues != 'Low'], prob = seq(0, 1, length = 11)))) }
mat <- matrix(NA, nrow = 10, ncol = 5)
for (TISSUE in order.tissues[1:5]) { mat[decile.val[TISSUE],which(order.tissues == TISSUE)] = 1 }
decile.val
infos.gene$Gene.expr.TPM[2,TISSUE]
head(quantile(LCAP[,TISSUE][max.tissue.df.LCAP$which.tissues != 'Low'], prob = seq(0, 1, length = 11))))
head(quantile(LCAP[,TISSUE][max.tissue.df.LCAP$which.tissues != 'Low'], prob = seq(0, 1, length = 11)))
quantile(LCAP[,TISSUE][max.tissue.df.LCAP$which.tissues != 'Low'], prob = seq(0, 1, length = 11)))
quantile(LCAP[,TISSUE][max.tissue.df.LCAP$which.tissues != 'Low'], prob = seq(0, 1, length = 11))
cut(0.77, quantile(LCAP[,TISSUE][max.tissue.df.LCAP$which.tissues != 'Low'], prob = seq(0, 1, length = 11)))
as.numeric(cut(0.77, quantile(LCAP[,TISSUE][max.tissue.df.LCAP$which.tissues != 'Low'], prob = seq(0, 1, length = 11))))
TISSUE
as.numeric(cut(infos.gene$Gene.expr.TPM[2,TISSUE], quantile(LCAP[,TISSUE][max.tissue.df.LCAP$which.tissues != 'Low'], prob = seq(0, 1, length = 11))))
decile.val[TISSUE]
decile.val <- c()
TISSUE
as.numeric(cut(infos.gene$Gene.expr.TPM[2,TISSUE], quantile(LCAP[,TISSUE][max.tissue.df.LCAP$which.tissues != 'Low'], prob = seq(0, 1, length = 11))))
TISSUE='Gonad'
as.numeric(cut(infos.gene$Gene.expr.TPM[2,TISSUE], quantile(LCAP[,TISSUE][max.tissue.df.LCAP$which.tissues != 'Low'], prob = seq(0, 1, length = 11))))
quantile(LCAP[,TISSUE][max.tissue.df.LCAP$which.tissues != 'Low'], prob = seq(0, 1, length = 11)))
quantile(LCAP[,TISSUE][max.tissue.df.LCAP$which.tissues != 'Low'], prob = seq(0, 1, length = 11))
par(mar=c(6,1,1,5))
decile.val <- c()
for (TISSUE in order.tissues[1:5]) { decile.val[TISSUE] <- as.numeric(cut(infos.gene()$Gene.expr.TPM[2,TISSUE], quantile(LCAP[,TISSUE][LCAP[,TISSUE] >0 & max.tissue.df.LCAP$which.tissues != 'Low'], prob = seq(0, 1, length = 11)))) }
mat <- matrix(NA, nrow = 10, ncol = 5)
for (TISSUE in order.tissues[1:5]) { mat[decile.val[TISSUE],which(order.tissues == TISSUE)] = 1 }
par(mar=c(6,1,1,5))
decile.val <- c()
for (TISSUE in order.tissues[1:5]) { decile.val[TISSUE] <- as.numeric(cut(infos.gene$Gene.expr.TPM[2,TISSUE], quantile(LCAP[,TISSUE][LCAP[,TISSUE] >0 & max.tissue.df.LCAP$which.tissues != 'Low'], prob = seq(0, 1, length = 11)))) }
mat <- matrix(NA, nrow = 10, ncol = 5)
for (TISSUE in order.tissues[1:5]) { mat[decile.val[TISSUE],which(order.tissues == TISSUE)] = 1 }
